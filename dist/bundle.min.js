!function(g){var I={};function n(C){if(I[C])return I[C].exports;var c=I[C]={i:C,l:!1,exports:{}};return g[C].call(c.exports,c,c.exports,n),c.l=!0,c.exports}n.m=g,n.c=I,n.d=function(g,I,C){n.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:C})},n.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},n.t=function(g,I){if(1&I&&(g=n(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var C=Object.create(null);if(n.r(C),Object.defineProperty(C,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var c in g)n.d(C,c,function(I){return g[I]}.bind(null,c));return C},n.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return n.d(I,"a",I),I},n.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},n.p="",n(n.s=1)}([function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*\n * JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\n/* global define */\n\n;(function ($) {\n  'use strict'\n\n  /*\n  * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n  * to work around bugs in some JS interpreters.\n  */\n  function safeAdd (x, y) {\n    var lsw = (x & 0xffff) + (y & 0xffff)\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16)\n    return (msw << 16) | (lsw & 0xffff)\n  }\n\n  /*\n  * Bitwise rotate a 32-bit number to the left.\n  */\n  function bitRotateLeft (num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt))\n  }\n\n  /*\n  * These functions implement the four basic operations the algorithm uses.\n  */\n  function md5cmn (q, a, b, x, s, t) {\n    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)\n  }\n  function md5ff (a, b, c, d, x, s, t) {\n    return md5cmn((b & c) | (~b & d), a, b, x, s, t)\n  }\n  function md5gg (a, b, c, d, x, s, t) {\n    return md5cmn((b & d) | (c & ~d), a, b, x, s, t)\n  }\n  function md5hh (a, b, c, d, x, s, t) {\n    return md5cmn(b ^ c ^ d, a, b, x, s, t)\n  }\n  function md5ii (a, b, c, d, x, s, t) {\n    return md5cmn(c ^ (b | ~d), a, b, x, s, t)\n  }\n\n  /*\n  * Calculate the MD5 of an array of little-endian words, and a bit length.\n  */\n  function binlMD5 (x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << (len % 32)\n    x[((len + 64) >>> 9 << 4) + 14] = len\n\n    var i\n    var olda\n    var oldb\n    var oldc\n    var oldd\n    var a = 1732584193\n    var b = -271733879\n    var c = -1732584194\n    var d = 271733878\n\n    for (i = 0; i < x.length; i += 16) {\n      olda = a\n      oldb = b\n      oldc = c\n      oldd = d\n\n      a = md5ff(a, b, c, d, x[i], 7, -680876936)\n      d = md5ff(d, a, b, c, x[i + 1], 12, -389564586)\n      c = md5ff(c, d, a, b, x[i + 2], 17, 606105819)\n      b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330)\n      a = md5ff(a, b, c, d, x[i + 4], 7, -176418897)\n      d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426)\n      c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341)\n      b = md5ff(b, c, d, a, x[i + 7], 22, -45705983)\n      a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416)\n      d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417)\n      c = md5ff(c, d, a, b, x[i + 10], 17, -42063)\n      b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162)\n      a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682)\n      d = md5ff(d, a, b, c, x[i + 13], 12, -40341101)\n      c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290)\n      b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329)\n\n      a = md5gg(a, b, c, d, x[i + 1], 5, -165796510)\n      d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632)\n      c = md5gg(c, d, a, b, x[i + 11], 14, 643717713)\n      b = md5gg(b, c, d, a, x[i], 20, -373897302)\n      a = md5gg(a, b, c, d, x[i + 5], 5, -701558691)\n      d = md5gg(d, a, b, c, x[i + 10], 9, 38016083)\n      c = md5gg(c, d, a, b, x[i + 15], 14, -660478335)\n      b = md5gg(b, c, d, a, x[i + 4], 20, -405537848)\n      a = md5gg(a, b, c, d, x[i + 9], 5, 568446438)\n      d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690)\n      c = md5gg(c, d, a, b, x[i + 3], 14, -187363961)\n      b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501)\n      a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467)\n      d = md5gg(d, a, b, c, x[i + 2], 9, -51403784)\n      c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473)\n      b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734)\n\n      a = md5hh(a, b, c, d, x[i + 5], 4, -378558)\n      d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463)\n      c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562)\n      b = md5hh(b, c, d, a, x[i + 14], 23, -35309556)\n      a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060)\n      d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353)\n      c = md5hh(c, d, a, b, x[i + 7], 16, -155497632)\n      b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640)\n      a = md5hh(a, b, c, d, x[i + 13], 4, 681279174)\n      d = md5hh(d, a, b, c, x[i], 11, -358537222)\n      c = md5hh(c, d, a, b, x[i + 3], 16, -722521979)\n      b = md5hh(b, c, d, a, x[i + 6], 23, 76029189)\n      a = md5hh(a, b, c, d, x[i + 9], 4, -640364487)\n      d = md5hh(d, a, b, c, x[i + 12], 11, -421815835)\n      c = md5hh(c, d, a, b, x[i + 15], 16, 530742520)\n      b = md5hh(b, c, d, a, x[i + 2], 23, -995338651)\n\n      a = md5ii(a, b, c, d, x[i], 6, -198630844)\n      d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415)\n      c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905)\n      b = md5ii(b, c, d, a, x[i + 5], 21, -57434055)\n      a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571)\n      d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606)\n      c = md5ii(c, d, a, b, x[i + 10], 15, -1051523)\n      b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799)\n      a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359)\n      d = md5ii(d, a, b, c, x[i + 15], 10, -30611744)\n      c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380)\n      b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649)\n      a = md5ii(a, b, c, d, x[i + 4], 6, -145523070)\n      d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379)\n      c = md5ii(c, d, a, b, x[i + 2], 15, 718787259)\n      b = md5ii(b, c, d, a, x[i + 9], 21, -343485551)\n\n      a = safeAdd(a, olda)\n      b = safeAdd(b, oldb)\n      c = safeAdd(c, oldc)\n      d = safeAdd(d, oldd)\n    }\n    return [a, b, c, d]\n  }\n\n  /*\n  * Convert an array of little-endian words to a string\n  */\n  function binl2rstr (input) {\n    var i\n    var output = ''\n    var length32 = input.length * 32\n    for (i = 0; i < length32; i += 8) {\n      output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xff)\n    }\n    return output\n  }\n\n  /*\n  * Convert a raw string to an array of little-endian words\n  * Characters >255 have their high-byte silently ignored.\n  */\n  function rstr2binl (input) {\n    var i\n    var output = []\n    output[(input.length >> 2) - 1] = undefined\n    for (i = 0; i < output.length; i += 1) {\n      output[i] = 0\n    }\n    var length8 = input.length * 8\n    for (i = 0; i < length8; i += 8) {\n      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << (i % 32)\n    }\n    return output\n  }\n\n  /*\n  * Calculate the MD5 of a raw string\n  */\n  function rstrMD5 (s) {\n    return binl2rstr(binlMD5(rstr2binl(s), s.length * 8))\n  }\n\n  /*\n  * Calculate the HMAC-MD5, of a key and some data (raw strings)\n  */\n  function rstrHMACMD5 (key, data) {\n    var i\n    var bkey = rstr2binl(key)\n    var ipad = []\n    var opad = []\n    var hash\n    ipad[15] = opad[15] = undefined\n    if (bkey.length > 16) {\n      bkey = binlMD5(bkey, key.length * 8)\n    }\n    for (i = 0; i < 16; i += 1) {\n      ipad[i] = bkey[i] ^ 0x36363636\n      opad[i] = bkey[i] ^ 0x5c5c5c5c\n    }\n    hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8)\n    return binl2rstr(binlMD5(opad.concat(hash), 512 + 128))\n  }\n\n  /*\n  * Convert a raw string to a hex string\n  */\n  function rstr2hex (input) {\n    var hexTab = '0123456789abcdef'\n    var output = ''\n    var x\n    var i\n    for (i = 0; i < input.length; i += 1) {\n      x = input.charCodeAt(i)\n      output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f)\n    }\n    return output\n  }\n\n  /*\n  * Encode a string as utf-8\n  */\n  function str2rstrUTF8 (input) {\n    return unescape(encodeURIComponent(input))\n  }\n\n  /*\n  * Take string arguments and return either raw or hex encoded strings\n  */\n  function rawMD5 (s) {\n    return rstrMD5(str2rstrUTF8(s))\n  }\n  function hexMD5 (s) {\n    return rstr2hex(rawMD5(s))\n  }\n  function rawHMACMD5 (k, d) {\n    return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d))\n  }\n  function hexHMACMD5 (k, d) {\n    return rstr2hex(rawHMACMD5(k, d))\n  }\n\n  function md5 (string, key, raw) {\n    if (!key) {\n      if (!raw) {\n        return hexMD5(string)\n      }\n      return rawMD5(string)\n    }\n    if (!raw) {\n      return hexHMACMD5(key, string)\n    }\n    return rawHMACMD5(key, string)\n  }\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return md5\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else {}\n})(this)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(g,I,n){g.exports=n(2)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src2/encrypt.js\nlet encrypt = {};\r\n(()=>{\r\nlet md5_util = __webpack_require__(0)\r\nfunction encodeStr (str){\r\n    let len = str.length / 2\r\n    let str1 = str.substring(0, len)\r\n    let str2 = str.substring(len)\r\n    //console.log('before:', str, (str === (str1+str2)) )\r\n    let arr1 = str1.split('').reverse();\r\n    let arr2 = str2.split('').reverse();\r\n    let arr = [].concat(arr1).concat(arr2)\r\n    let impurities = (md5_util(''+Math.random()+(new Date()))+md5_util(''+Math.random()+(new Date()))).split('')\r\n    let impurities2 = (md5_util(''+Math.random()+(new Date()))+md5_util(''+Math.random()+(new Date()))).split('')\r\n    let newarr = []\r\n    for(var i = 0; i< arr.length; i++){\r\n        newarr.push(makeRandomAlphabet() + arr[i] + makeRandomAlphabet());\r\n    }\r\n    let newstr = newarr.join('')\r\n    return newstr;\r\n}\r\nfunction decodeStr (encoded){\r\n    let arr = encoded.split('').reverse();\r\n    let char = 1;\r\n    let str = ''\r\n    while(char){\r\n        //console.log(char)\r\n        arr.shift();\r\n        char = arr.shift();\r\n        if(char)str += char;\r\n        arr.shift();\r\n    }\r\n    let len = str.length / 2\r\n    let str1 = str.substring(0, len)\r\n    let str2 = str.substring(len)\r\n    let arr1 = str1.split('');\r\n    let arr2 = str2.split('');\r\n    str = arr2.join('') + arr1.join('') \r\n    return str;\r\n}\r\nfunction makeRandomAlphabet(capitalize) {\r\n    var text = \"\";\r\n    var alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    var alphabetsUpper = alphabets.toUpperCase();\r\n    var alphabetsLower = alphabets.toLowerCase();\r\n    var possible = alphabetsUpper+alphabetsLower;\r\n    if(typeof capitalize !== 'undefined' && capitalize === 'upper') possible = alphabetsUpper;\r\n    if(typeof capitalize !== 'undefined' && capitalize === 'lower') possible = alphabetsLower;\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    return text;\r\n};\r\nfunction makeRandomNumber() {\r\n    var text = \"\";\r\n    var possible = \"0123456789\";\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    return text;\r\n};\r\n//console.warn('random-alphabet', makeRandomAlphabet(), makeRandomAlphabet('upper'), makeRandomAlphabet('lower'), makeRandomNumber());\r\nfunction makeRespCode(){\r\n    return  makeRandomAlphabet()\r\n}\r\nfunction isRespCode(info){\r\n    var letter = info.substring(0,1)\r\n    return  /\\b[a-zA-Z]\\b/.test(letter)\r\n}\r\nfunction makeReqCode(){\r\n    return  makeRandomNumber()\r\n}\r\nfunction isReqCode(info){\r\n    var letter = info.substring(0,1)\r\n    return  /\\b[0-9]\\b/.test(letter)\r\n}\r\nfunction encryptFromCode(desc, from){\r\n    if(from === 'self') return 0;\r\n    if(from === 'child') return 1;\r\n    if(from === 'parent') return 2;\r\n}\r\nfunction decryptFromCode(desc, info){\r\n    var letter = info.substring(1,2)\r\n    if(letter === '0') return 'self';\r\n    if(letter === '1') return 'child';\r\n    if(letter === '2') return 'parent';\r\n}\r\nfunction encryptMessageData(data, status){\r\n    var isResp = status.isResp;\r\n    var isReq = status.isReq;\r\n    //req & resp\r\n    if(status.isResp){\r\n        var isResp = makeRespCode();//英文字母代表是response\r\n        data.info = `${isResp}`;\r\n    }\r\n    if(status.isReq){\r\n        var isReq = makeReqCode();//表明是request\r\n        data.info = `${isReq}`;\r\n    }\r\n    //from\r\n    var fromCode = encryptFromCode({isReq, isResp}, status.from)\r\n    data.info += fromCode;\r\n    //pageid\r\n    if(isReq) data.info += status.requestPageId;\r\n    if(isResp) data.info += status.responsePageId;\r\n    //tokens\r\n    let token = status.responseToken;\r\n    let tokenLength = token.length;\r\n    let tokenLengthMark;\r\n    if(tokenLength === 32) tokenLengthMark = 32;\r\n    if(tokenLength === 96) tokenLengthMark = 96;\r\n    if(tokenLength === 32) token = token + md5_util(Math.random()) + md5_util(Math.random())//补齐到96位\r\n    data.info += tokenLengthMark + token;\r\n    //eventName\r\n    var hasEventName = !!status.eventName;\r\n    var fakeEventName = md5_util(Math.random())\r\n    data.info += (hasEventName?'1':'0') + (hasEventName?status.eventName:fakeEventName)\r\n\r\n    //data.responseToken = status.responseToken\r\n\r\n    //console.warn('tokenLength', token, tokenLength)\r\n    data.info = encryptInfo(data.info);\r\n\r\n    return data;\r\n}\r\nfunction decryptMessageData(data){   \r\n    data.info = decryptInfo(data.info); \r\n    var isResp = isRespCode(data.info);\r\n    var isReq = isReqCode(data.info);\r\n    var status = {}\r\n    if(isResp){\r\n        status.isResp = true;\r\n    }\r\n    if(isReq){\r\n        status.isReq = true;\r\n    }\r\n    status.from = decryptFromCode({isReq, isResp}, data.info)\r\n    // 2+32+2+96\r\n    var currentInfoStr = data.info.substring(2)\r\n    //pageid\r\n    var pageid = currentInfoStr.substring(0, 32);currentInfoStr = currentInfoStr.substring(32)\r\n    if(isReq) status.requestPageId = pageid;\r\n    if(isResp) status.responsePageId = pageid;\r\n    //token\r\n    //console.warn(currentInfoStr.length)\r\n    var tokenLengthStr = currentInfoStr.substring(0, 2);currentInfoStr = currentInfoStr.substring(2)\r\n    var tokenLength = parseInt(tokenLengthStr)\r\n    var token = currentInfoStr.substring(0, 96);currentInfoStr = currentInfoStr.substring(96)\r\n    //console.warn('kk',currentInfoStr.length, tokenLength, token.length)\r\n    if(tokenLength === 32) token = token.substring(0, tokenLength)\r\n    status.responseToken = token;\r\n\r\n    //eventName\r\n    var has = currentInfoStr.substring(0, 1);currentInfoStr = currentInfoStr.substring(1)\r\n    var hasEventName = (has === '1'?true:false);\r\n    var eventName = currentInfoStr.substring(0, 32);currentInfoStr = currentInfoStr.substring(32)\r\n    //console.warn(has, hasEventName, eventName.length)\r\n\r\n    if(hasEventName){\r\n        status.eventName = eventName;\r\n    }\r\n    return status;\r\n}\r\nvar SHOULD_DECRYPT_CODE = md5_util(new Date()+'');\r\nlet encryptInfo = (info)=>{\r\n    let arr = info.split('')\r\n    arr = arr.reverse();\r\n    var result = arr.join('')\r\n    result = result + 'z'//不是偶数，凑个偶数\r\n    result = encodeStr(result)//加密\r\n    result = SHOULD_DECRYPT_CODE + result;//HEAD\r\n    return result;\r\n}\r\n\r\nlet decryptInfo = (info)=>{\r\n    if(info.indexOf(SHOULD_DECRYPT_CODE)!==0) return info;//如果只是转发就不必再次解密\r\n    info = info.substring(SHOULD_DECRYPT_CODE.length)//HEAD\r\n    info = decodeStr(info); //解密\r\n    info = info.substring(0, info.length-1)//去掉凑偶数的字符\r\n    let arr = info.split('')\r\n    arr = arr.reverse();\r\n    var result = arr.join('')\r\n    return result;\r\n}\r\n// var userinput = md5_util('12341234123');\r\n// //userinput = '123abc'\r\n// var encoded = encodeStr(userinput)\r\n// var decoded = decodeStr(encoded);\r\n// console.log('encoded:',encoded)\r\n// console.log('dencoded:', decoded)\r\n// console.log('userinput==dencoded:', userinput === decoded)\r\nencrypt.encodeStr=encodeStr;\r\nencrypt.decodeStr=decodeStr;\r\nencrypt.encryptMessageData=encryptMessageData;\r\nencrypt.decryptMessageData=decryptMessageData;\r\n})();\r\n/* harmony default export */ var src2_encrypt = (encrypt);\r\n\n// CONCATENATED MODULE: ./src2/listener.js\n//listener\r\nlet md5_util = __webpack_require__(0)\r\n\r\nlet init = (messenger)=>{\r\n    var _listeningEvents = {}\r\n    var handleRequest = function (data) {\r\n        //console.log('on msg', window.location.href, data)\r\n        var data = data.data;\r\n        if(data && data.messengerjs /**&& data.messengerjs.isReq **/){\r\n            process(data.messengerjs)\r\n        }\r\n    }\r\n    var doResponse = (responseToken, result)=>{\r\n        //console.log('i-can-process-this-request:', eventName, args, responseToken, result)\r\n        var windows = messenger.getTargetWindows();\r\n        for(var i = 0; i < windows.length; i++){\r\n            var iframe = windows[i]\r\n            //console.log('send response:', eventName, responseToken, iframe)\r\n            var obj = {\r\n                messengerjs:{                          \r\n                    result\r\n                }\r\n            };\r\n            obj.messengerjs = src2_encrypt.encryptMessageData(obj.messengerjs, {\r\n                isResp: true,\r\n                from: iframe.from,\r\n                responsePageId: messenger.getPageId(),\r\n                responseToken: src2_encrypt.encodeStr(responseToken),\r\n            });\r\n            obj = JSON.parse(JSON.stringify(obj));\r\n            messenger.doPostMessage(iframe.win, obj, '*');\r\n        }\r\n    }\r\n    var process = function(data){\r\n        //invoke\r\n        var args = data.args;\r\n        var status = src2_encrypt.decryptMessageData(data);   \r\n        var eventName = status.eventName;     \r\n        var responseToken = status.responseToken;\r\n\r\n        //console.warn('doResponse', responseToken, responseToken.length)\r\n        \r\n        var fn = _listeningEvents[eventName]\r\n        //console.log('process', !!fn, window.location.href)\r\n        if(fn && data){\r\n            if(status.isReq){\r\n                var result = fn.apply(window, args)\r\n                if(result && typeof result.then === 'function'){\r\n                    result.then((data)=>{\r\n                        doResponse(responseToken, data)\r\n                    })\r\n                }else{\r\n                    doResponse(responseToken, result)\r\n                }\r\n            }            \r\n        }\r\n        //转发\r\n        if(status.from === 'parent'){//继续向child传播\r\n            var iframes = document.getElementsByTagName('iframe');\r\n            for(var i = 0; i < iframes.length; i++){\r\n                status.from = 'parent';\r\n                //console.log('godeep', window.location.href, i, data)\r\n                var obj = {messengerjs:data}\r\n                obj = JSON.parse(JSON.stringify(obj));\r\n                messenger.doPostMessage(iframes[i].contentWindow, obj, '*');\r\n            }\r\n        }\r\n        if(status.from === 'child'){//继续向parent传播\r\n            //console.log('from child', window.location.href)\r\n            if(window !== window.parent){\r\n                status.from = 'child';\r\n                var obj = {messengerjs:data}\r\n                obj = JSON.parse(JSON.stringify(obj));\r\n                messenger.doPostMessage(window.parent, obj, '*');\r\n            }\r\n        }\r\n    }\r\n    messenger.listen = function(eventName, callback){\r\n        eventName = md5_util(eventName)\r\n        _listeningEvents[eventName] = callback;\r\n    };    \r\n    messenger.stopListen = function(eventName){\r\n        eventName = md5_util(eventName)\r\n        delete _listeningEvents[eventName];\r\n    };\r\n    if (window.addEventListener) {\r\n        window.addEventListener(\"message\", handleRequest);\r\n    } else if (window.attachEvent) {\r\n        window.attachEvent(\"onmessage\", handleRequest);\r\n    }\r\n    console.log('listening...')\r\n}\r\nlet listener={\r\n    init\r\n}\r\n/* harmony default export */ var src2_listener = (listener);\r\n\n// CONCATENATED MODULE: ./src2/requester.js\n//request\r\nlet requester_md5_util = __webpack_require__(0)\r\n\r\nlet requester_init = (messenger)=>{\r\n    var generateToken = ()=>{\r\n        var time = (Math.random()*1.7+'') +'-'+ 2.3 * (new Date())\r\n        return requester_md5_util(time.replace(/\\./ig,''));\r\n    }\r\n    var _currentTarget = window.parent;\r\n    var _currentTargetHost = '*';\r\n    var _waitingPromiseMap = {};\r\n    var thisPageId = ''+generateToken();\r\n\r\n    messenger.getPageId= ()=>{\r\n            return thisPageId;\r\n        }\r\n    messenger.getTargetWindows= ()=>{\r\n            var iframelist = [];//[window.parent];\r\n            iframelist.push({\r\n                                is: 'self',\r\n                                from: 'self',//在对方看来，是self，parent，还是child\r\n                                win:window\r\n                            });\r\n            if(window !== window.parent) {\r\n                iframelist.push({\r\n                                    is: 'parent',\r\n                                    from: 'child',\r\n                                    win: window.parent\r\n                                });\r\n\r\n            }\r\n            var iframes = document.getElementsByTagName('iframe');\r\n            for(var i = 0; i < iframes.length; i++){\r\n                iframelist.push({\r\n                    is: 'child',\r\n                    from:'parent',\r\n                    win: iframes[i].contentWindow\r\n                })\r\n            }\r\n            return iframelist;\r\n        }\r\n        messenger.setTarget= function(target){\r\n            _currentTarget = target;\r\n            if(_currentTarget.contentWindow) _currentTarget = _currentTarget.contentWindow;\r\n            return messenger;\r\n        }\r\n        messenger.emit= function (){\r\n            var me = this;\r\n            var eventName = arguments[0];\r\n            eventName = requester_md5_util(eventName)\r\n            var args = [];\r\n            for(var i = 1; i < arguments.length; i++){\r\n                args.push(arguments[i]);\r\n            }\r\n            var responseToken = ''+generateToken();\r\n            //console.warn('generateToken',responseToken.length)\r\n            var windows = me.getTargetWindows();\r\n            for(var i = 0; i < windows.length; i++){\r\n                var iframe = windows[i];\r\n                console.log('sent-req:', eventName, responseToken, iframe)\r\n                var obj = {\r\n                    messengerjs:{\r\n                        args,//本次请求的参数\r\n                    }\r\n                };\r\n                obj.messengerjs = src2_encrypt.encryptMessageData(obj.messengerjs, {\r\n                    eventName,//请求的名字\r\n                    isReq: true,//表明是request\r\n                    from: iframe.from,                    \r\n                    requestPageId: thisPageId, //发起请求的页面id\r\n                    responseToken,//本次请求的token，一次性\r\n                });\r\n                obj = JSON.parse(JSON.stringify(obj));\r\n                messenger.doPostMessage(iframe.win, obj, _currentTargetHost);\r\n            }\r\n            _waitingPromiseMap[responseToken] = {\r\n                receiveCount: 0\r\n            };\r\n            return {\r\n                onResponse: (cb)=>{\r\n                    _waitingPromiseMap[responseToken].cb = cb;\r\n                }\r\n            };\r\n        }\r\n    \r\n    var handleResponse = (data)=>{\r\n        //console.log('on msg', window.location.href, data)\r\n        var data = data.data;\r\n        if(!data || !data.messengerjs)return;\r\n        var status = src2_encrypt.decryptMessageData(data.messengerjs)\r\n        var responseToken = src2_encrypt.decodeStr(status.responseToken)\r\n        //if(data.messengerjs && data.messengerjs.isResp && _waitingPromiseMap[responseToken]){\r\n        if(data.messengerjs && data.messengerjs.info){\r\n            if(status.isResp && _waitingPromiseMap[responseToken]){\r\n                process(responseToken, data.messengerjs)\r\n            }\r\n        }\r\n    };\r\n    var process = (responseToken, data)=>{\r\n        var result = data.result;\r\n        //console.warn('got response', window.location.href, result)\r\n        let stopReceive = ()=>{\r\n            delete _waitingPromiseMap[responseToken];\r\n        }\r\n        let count = ++_waitingPromiseMap[responseToken].receiveCount;\r\n        if(_waitingPromiseMap[responseToken].cb){\r\n            _waitingPromiseMap[responseToken].cb(result, {count: count, stopReceive: stopReceive});\r\n        }\r\n    };\r\n    if (window.addEventListener) {\r\n        window.addEventListener(\"message\", handleResponse);\r\n    } else if (window.attachEvent) {\r\n        window.attachEvent(\"onmessage\", handleResponse);\r\n    }\r\n    \r\n}\r\nlet requester={\r\n    init: requester_init\r\n}\r\n/* harmony default export */ var src2_requester = (requester);\r\n\n// CONCATENATED MODULE: ./src2/main.js\n\r\n\r\n\r\n\r\nlet main_messenger = {\r\n    doPostMessage: function(winObj, data, target, other){\r\n        if(!winObj.postMessage){\r\n            return;\r\n        } \r\n        var messengerjs = data.messengerjs;\r\n        delete messengerjs.isReq;\r\n        delete messengerjs.isResp;\r\n        delete messengerjs.from;\r\n\r\n        messengerjs.isReq = undefined;\r\n        messengerjs.isResp = undefined;\r\n        messengerjs.from = undefined;\r\n\r\n        //messengerjs.aaaaa = 1111111;\r\n        messengerjs = JSON.parse(JSON.stringify(messengerjs))\r\n\r\n        var messengerjs2 = {}\r\n        for(var key in messengerjs){\r\n            if(key !== 'isReq' && key !== 'isResp' && key !== 'from'){\r\n                messengerjs2[key] = messengerjs[key];\r\n            }else{\r\n                \r\n            }\r\n        }\r\n        var data2 = {\r\n            messengerjs: messengerjs2\r\n        }\r\n        winObj.postMessage(data2, target, other);\r\n    }\r\n};\r\nsrc2_listener.init(main_messenger);\r\nsrc2_requester.init(main_messenger);\r\nwindow.messenger = main_messenger;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")}]);